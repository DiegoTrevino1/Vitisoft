package com.vitisoft.backend.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.time.OffsetDateTime;

/**
 * Represents an emergency. Mirrors entries in the `emergencies` table in the
 * database.
 * Includes fields such as type, address, priority, and status. Used in both
 * creation and retrieval of emergency records via the backend.
 */
public class Emergency {

    /** Unique emergency ID (auto-generated by the database) */
    @JsonProperty("id")
    public int id;

    /** The username of the dispatcher or user who created the emergency */
    @JsonProperty("userName")
    public String userName;

    /**
     * Timestamp of when the emergency was received.
     * Accepts ISO 8601 format with milliseconds and timezone,
     * e.g. 2025-06-02T03:26:17.677Z
     */
    @JsonProperty("receivedTime")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSX")
    public OffsetDateTime receivedTime;

    /** Identifier for the caller (e.g., radio unit, phone number, etc.) */
    @JsonProperty("callerID")
    public String callerID;

    /** Description of the emergency situation */
    @JsonProperty("details")
    public String details;

    /** Address where the emergency is occurring */
    @JsonProperty("address")
    public String address;

    /** Type of emergency (e.g., Fire, Medical, Police) */
    @JsonProperty("type")
    public String type;

    /** Indicates whether the emergency is still active */
    @JsonProperty("isActive")
    public boolean isActive;

    /** Priority level of the emergency (e.g., 1 = highest, 5 = lowest) */
    @JsonProperty("priority")
    public int priority;

    /**
     * Default no-argument constructor required for JSON deserialization.
     */
    public Emergency() {
    }

    /**
     * Constructs a new Emergency object without an assigned ID.
     * Used when creating a new emergency entry before it is stored in the database.
     *
     * @param userName     The username of the user who created this emergency
     * @param receivedTime The time when this emergency was first received
     * @param callerID     The caller ID of whoever called 911, if available
     * @param details      A short description of the emergency situation
     * @param address      The address where the emergency is happening
     * @param type         The type/category of emergency (e.g., Fire, Medical)
     * @param isActive     Whether this emergency is currently active
     * @param priority     The priority level of the emergency
     */
    public Emergency(String userName, OffsetDateTime receivedTime,
            String callerID, String details, String address,
            String type, boolean isActive, int priority) {
        this.userName = userName;
        this.receivedTime = receivedTime;
        this.callerID = callerID;
        this.details = details;
        this.address = address;
        this.type = type;
        this.isActive = isActive;
        this.priority = priority;
    }

    /**
     * Constructs a fully-defined Emergency object with an assigned ID.
     * Used when retrieving emergency entries from the database.
     *
     * @param id           The emergency's unique ID
     * @param userName     The username of the user who created this emergency
     * @param receivedTime The time when this emergency was first received
     * @param callerID     The caller ID of whoever called 911, if available
     * @param details      A short description of the emergency situation
     * @param address      The address where the emergency is happening
     * @param type         The type/category of emergency (e.g., Fire, Medical)
     * @param isActive     Whether this emergency is currently active
     * @param priority     The priority level of the emergency
     */
    public Emergency(int id, String userName, OffsetDateTime receivedTime,
            String callerID, String details, String address,
            String type, boolean isActive, int priority) {
        this.id = id;
        this.userName = userName;
        this.receivedTime = receivedTime;
        this.callerID = callerID;
        this.details = details;
        this.address = address;
        this.type = type;
        this.isActive = isActive;
        this.priority = priority;
    }
}
